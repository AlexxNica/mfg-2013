% meta parameters
mpx:=A_px#+metapolation*(B_px#-A_px#);
mwidth:=A_width+metapolation*(B_width-A_width);
mxheight:=A_xheight+metapolation*(B_xheight-A_xheight);
mxheightpt:=A_xheightpt+metapolation*(B_xheightpt-A_xheightpt);
mcapital:=A_capital+metapolation*(B_capital-A_capital);
mcapitalpt:=A_capitalpt+metapolation*(B_capitalpt-A_capitalpt);
mascender:=A_ascender+metapolation*(B_ascender-A_ascender);
mascenderpt:=A_ascenderpt+metapolation*(B_ascenderpt-A_ascenderpt);
mdescender:=A_descender+metapolation*(B_descender-A_descender);
mdescenderpt:=A_descenderpt+metapolation*(B_descenderpt-A_descenderpt);
mskeleton:=A_skeleton+metapolation*(B_skeleton-A_skeleton);
mover:=A_over+metapolation*(B_over-A_over);

% this file contains all defenitions outside glyphs and extra parameters not listed on metaflop.com
% py#:=px#;
A_py#:=A_px#;
B_py#:=B_px#;

% some defenitions for the output and proof sheets
def endchar =
 scantokens extra_endchar;
 chardx:=w;
% makebox(proofrule);
 shipit;
 endgroup enddef;

% box and guide lines on proof sheet

% def makebox(text r) = 
% for y=0,h.o_,-d.o_, mean, cap, -des, asc, : r((0,y),(w,y)); endfor % horizontals 
% for x=0,w, :	r((x,-des),(x,asc)); endfor % verticals 

% for x=0,w, 0.1w, 0.2w, 0.3w, 0.4w, 0.5w, 0.6w, 0.7w, 0.8w, 0.9w:	r((x,-des),(x,asc)); endfor % verticals 
%%%%for x=0,w, 0.2w, 0.4w, 0.6w, 0.8w:	r((x,-d.o_),(x,h.o_)); endfor % verticals 

%if charic<>0: r((w+charic*hppp,h.o_),(w+charic*hppp,.5h.o_)); 
%fi enddef;

% initiate output mode

%mode=localfont;
mode=luxo;
mode_setup;

% pixel conversions into real points %
% metafont needs these pixel definitions to calculate the final dimensions of the parameter values
define_pixels(s,u);

define_pixels(px,py);
define_pixels(A_px,A_py,A_skeleton);
define_pixels(B_px,B_py,B_skeleton);
define_good_y_pixels(mean,cap,asc,desc,box);

vardef tanh(expr x) =
numeric ee_;
ee_ = mexp (256.0 * 2.0 * x);
((ee_-1.0)/(ee_+1.0))
enddef;

% begin character macros %
def beginfontchar(expr code, unit_width, h, d) =
beginchar(code,unit_width*u#,h,d);
pickup font_pen;
enddef;

% fixed pen settings %
%pickup pencircle xscaled px yscaled py rotated 15;
%font_pen:=savepen;

% fixed pen settings %
pickup pencircle xscaled (A_px + metapolation*(B_px-A_px)) yscaled (A_py + metapolation*(B_py-A_py)) rotated 15;
font_pen:=savepen;


% calculation for diagonal stems, like in uppercase A
vardef diag_ratio(expr a,b,y,c) =
numeric aa_, bb_, cc_; bb_=b/y; cc_=c/y; aa_=a-(b/y)*(b/y);
(a*(cc_++sqrt aa_)-bb_*cc_)/aa_ enddef;

% superness macros, can be used for quarter circle segments %
mtsuperness:=A_superness+metapolation*(B_superness-A_superness);

% left curves (superness) %
def super_ql(suffix i,j,m) =
z.i{0,y.j-y.i} ... ( ( m * mtsuperness) [x.j,x.i], (m * mtsuperness) [y.i,y.j] ) {z.j-z.i}...z.j{x.j-x.i,0} enddef;

% right curves ((A_superness + metapolation * (B_superness - A_superness)) %
def super_qr(suffix j,k, m) =
z.j{x.k-x.j,0} ... ( ( m * mtsuperness) [x.j,x.k], (m * mtsuperness) [y.k,y.j] ) {z.k-z.j}...z.k{0,y.k-y.j} enddef;


% stem cut and ink trap macros
def stemcutter(expr a) =
a*(A_stemcut+metapolation*(B_stemcut-A_stemcut)) enddef;

def stemshift(expr a) =
shifted (0.5*a*(A_stemcut+metapolation*(B_stemcut-A_stemcut)),0) enddef;

def inktrapcut(expr a) =
a*(A_inktrap + metapolation * (B_inktrap-A_inktrap)) enddef;
 
def inktrap_l(expr a)=
shifted (-0.5*a*(A_inktrap + metapolation * (B_inktrap-A_inktrap)),0) enddef;

def inktrap_r(expr a)=
shifted (0.5*a*(A_inktrap + metapolation * (B_inktrap-A_inktrap)),0) enddef;

% width and sidebearing settings for each glyph
input spacing

% glyph input
input glyphlist